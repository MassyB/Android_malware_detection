import pandas as pd
from sklearn.model_selection import GridSearchCV
from sklearn.svm import LinearSVC
import numpy as np
import matplotlib.pyplot as plt


def get_best_params(X_train_val, y_train_val, nb_splits, scorer, param_grid, estimator):
    grid_search = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=nb_splits, scoring=scorer)
    grid_search.fit(X_train_val, y_train_val)
    return {'best_params': grid_search.best_params_,
            'best_score': grid_search.best_score_,
            'best_estimator': grid_search.best_estimator_,
            'cv_restults': pd.DataFrame(grid_search.cv_results_)}


def get_best_LinearSVC_param(X_train_val, y_train_val, nb_splits=10, scorer='roc_auc',
                             c_range=np.logspace(-5, 2, num=100)):
    grid_search_dict = get_best_params(X_train_val, y_train_val,
                                       nb_splits, scorer,
                                       {'c': c_range}, LinearSVC())

    cv_data_frame = grid_search_dict['cv_results']
    grid_search_dict['cv_results'] = pd.DataFrame({'param_c': cv_data_frame['param_c'],
                                                   'mean_test_score': cv_data_frame['mean_test_score'],
                                                   'rank_test_score': cv_data_frame['rank_test_score']})
    return grid_search_dict


def show_plot(x_values, y_values, line_label, x_label, y_label):
    show_plots([x_values], [y_values], [line_label], ['r'], x_label, y_label)


def show_plots(x_values, y_values, line_labels, colors, x_label, y_label):
    for x_value, y_value, line_label, color in zip(x_values, y_values, line_labels, colors):
        plt.plot(x_value, y_value, color, label=line_label)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.legend().draggable()
    plt.show()
