from apk import APK
from db_context_managers import OpenReaderCursor

_SQL_get_dimensions = """SELECT printf("%s::%s", type, name) AS dimension
                         FROM dimensions"""

_SQL_get_top_usage_ratio_dimensions = """SELECT printf("%s::%s", type, name) AS dimension
                             FROM dimensions
                             WHERE malware_usage >= :malware_usage
                                   AND
	                               malware_ratio >= :malware_ratio
	                         ORDER BY malware_usage, malware_ratio"""

_SQL_get_top_ratio_usage_dimensions = """SELECT printf("%s::%s", type, name) AS dimension
                             FROM dimensions
                             WHERE malware_usage >= :malware_usage
                                   AND
	                               malware_ratio >= :malware_ratio
	                         ORDER BY malware_ratio, malware_usage"""

_SQL_get_top_ratio_usage_dimension_in_type = """SELECT printf("%s::%s", type, name) AS dimension
                                   FROM dimensions
                                   WHERE malware_usage >= :malware_usage
                                         AND
	                                     malware_ratio >= :malware_ratio
	                                     AND
	                                     type = :type
	                               ORDER BY malware_ratio, malware_usage"""

_SQL_get_top_usage_ratio_dimension_in_type = """SELECT printf("%s::%s", type, name) AS dimension
                                   FROM dimensions
                                   WHERE malware_usage >= :malware_usage
                                         AND
	                                     malware_ratio >= :malware_ratio
	                                     AND
	                                     type = :type
	                               ORDER BY malware_usage, malware_ratio"""


def get_all_dimensions() -> list:
    """returns all the dimensions of the apks in the DB"""
    with OpenReaderCursor(_SQL_get_dimensions) as cursor:
        return [dimension[0] for dimension in cursor.fetchall()]


def get_top_usage_ratio_dimensions(malware_usage=0, malware_ratio=0, limit=None) -> list:
    return get_limited_dimensions(_SQL_get_top_usage_ratio_dimensions,
                                  {'malware_usage': malware_usage,
                                   'malware_ratio': malware_ratio},
                                  limit=limit)


def get_top_ratio_usage_dimensions(malware_usage=0, malware_ratio=0, limit=None) -> list:
    return get_limited_dimensions(_SQL_get_top_ratio_usage_dimensions,
                                  {'malware_usage': malware_usage,
                                   'malware_ratio': malware_ratio},
                                  limit=limit)


def get_top_ratio_usage_dimensions_by_types(malware_usage=0, malware_ratio=0, limit=None) -> list:
    dimensions = []
    for type in APK.get_feature_types():
        type_dimensions = get_limited_dimensions(_SQL_get_top_ratio_usage_dimension_in_type,
                                                 {'malware_usage': malware_usage,
                                                  'malware_ratio': malware_ratio,
                                                  'type': type},
                                                 limit=limit)
        dimensions.extend(type_dimensions)
    return dimensions


def get_top_usage_ratio_dimensions_by_types(malware_usage=0, malware_ratio=0, limit=None) -> list:
    dimensions = []
    for type in APK.get_feature_types():
        type_dimensions = get_limited_dimensions(_SQL_get_top_usage_ratio_dimension_in_type,
                                                 {'malware_usage': malware_usage,
                                                  'malware_ratio': malware_ratio,
                                                  'type': type},
                                                 limit=limit)
        dimensions.extend(type_dimensions)
    return dimensions


def get_limited_dimensions(sql_get_top_dimensions, sql_arg_dict, limit=None) -> list:
    with OpenReaderCursor(sql_get_top_dimensions, sql_arg_dict) as curosr:
        dimensions = [dimension[0] for dimension in curosr.fetchall()]

    if limit and limit <= len(dimensions):
        return dimensions[:limit]
    else:
        return dimensions