import os
from utils import list_files, MALWARE_DATASET_DIR_PATH, BENIGN_DATASET_DIR_PATH
from apk import APK
from feature_extractor_dex import extract_dex_features
from feature_extractor_manifest import extract_manifest_features


def analyse_apks(path: str, malignity: int, log_errors=False) -> int:
    apks = {APK(apk_path, malignity) for apk_path in list_files(path)}
    count = 0
    if log_errors:
        log_file = open('analyse_apks_log.txt', 'w')
        log_file.write('APK not analysed: \n')
    for apk in apks:
        extract_dex_features(apk)
        extract_manifest_features(apk)
        try:
            apk.save_apk_to_db()
            count += 1
            print(apk.get_name + ' analyzed .... ' + str(count) + '/' + str(len(apks)))
        except Exception as exception:
            print('Error for APK ' + apk.get_name())
            print(exception)
            if log_errors:
                log_file.write(apk.get_name+'\n')
                log_file.write(str(exception)+'\n')
                log_file.write('----------\n')
    return count


def analyse_malware_apks(log_errors=False) -> int:
    return analyse_apks(MALWARE_DATASET_DIR_PATH, 1, log_errors=log_errors)


def analyse_malware_dataset(dir_name: str, log_errors=False) -> int:
    dataset_dir_path = os.path.join(MALWARE_DATASET_DIR_PATH, dir_name)
    return analyse_apks(dataset_dir_path, 1, log_errors=log_errors)


def analyse_benign_apks(log_errors=False) -> int:
    return analyse_apks(BENIGN_DATASET_DIR_PATH, 0, log_errors=log_errors)


def analyse_benign_dataset(dir_name: str, log_errors=False) -> int:
    dataset_dir_path = os.path.join(BENIGN_DATASET_DIR_PATH, dir_name)
    return analyse_apks(dataset_dir_path, 0, log_errors=log_errors)
