import os
import shutil
import subprocess
import pprint
import platform

BAKSMALI_PATH = os.path.abspath(os.path.join('tools', 'baksmali-2.1.3.jar'))
BAKSMALI_OUTPUT = os.path.abspath(os.path.join('tools_output', 'baksmali_output'))

APKTOOL_PATH = os.path.abspath(os.path.join('tools', 'apktool.jar'))
APKTOOL_OUTPUT = os.path.abspath(os.path.join('tools_output', 'apktool_output'))

MALWARE_DATASET_DIR_PATH = os.path.abspath(os.path.join('datasets', 'malwares'))
BENIGN_DATASET_DIR_PATH = os.path.abspath(os.path.join('datasets', 'benign'))

SQLITE_DB_PATH = os.path.abspath(os.path.join('DB_scripts', 'droid_sec.sqlite'))


def clean_directory(dir_path):
    _, dirnames, filenames = next(os.walk(dir_path), (None, None, None))
    if dirnames:
        for dirname in dirnames:
            shutil.rmtree(os.path.abspath(os.path.join(dir_path, dirname)))
    if filenames:
        for filename in filenames:
            os.remove(os.path.abspath(os.path.join(dir_path, filename)))


def clean_baksmali_output_dir():
    clean_directory(BAKSMALI_OUTPUT)


def clean_apktool_output():
    magic_prefix = ""
    if platform.system()=="Windows":
        magic_prefix="\\\\?\\"
    clean_directory(magic_prefix+APKTOOL_OUTPUT)


def execute_baksmali_jar(apk_path: str):
    subprocess.run(['java', '-jar', BAKSMALI_PATH, apk_path, '-o', BAKSMALI_OUTPUT],shell=True)


def execute_apktool(apk_path: str):
    subprocess.run(['java', '-jar', APKTOOL_PATH, "-o", APKTOOL_OUTPUT, "-s", "-f", "d", apk_path],
                   stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=True)


def list_files(path: str) -> set:
    files = set()
    for (dirpath, _, filenames) in os.walk(path):
        for filename in filenames:
            files.add(os.path.abspath(os.path.join(dirpath, filename)))
    return files


def get_smali_files() -> str:
    magic_prefix = ""
    if platform.system() == "Windows":
        magic_prefix = "\\\\?\\"
    for (dirpath, _, filenames) in os.walk(BAKSMALI_OUTPUT):
        if filenames:
            for file_name in filenames:
                yield magic_prefix+os.path.join(dirpath, file_name)


def get_smali_lines(file_path: str) -> str:
    with open(file_path, encoding='utf8') as file:
        for line in file:
            yield line


def apk_print(apk):
    pprint.pprint({'apk_name': apk.get_name(),
                   'apk_path': apk.get_path(),
                   'apk_malignity': apk.get_malignity(),
                   'apk_nb_features': len(apk.get_features),
                   'apk_features': apk.get_features})
