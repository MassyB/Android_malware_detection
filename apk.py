from db_manager import insert_apk, insert_features


class APK:
    def __init__(self, name: str, path: str, malignity: int = None):
        self.manifest_features = ManifestFeatures()
        self.dex_features = DexFeatures()
        self.malignity = malignity
        self.name = name
        self.path = path
        self.score = None

    def set_manifest_features(self, manifest_features):
        if type(manifest_features) == ManifestFeatures:
            self.manifest_features = manifest_features

    def set_dex_features(self, dex_features):
        if type(dex_features) == DexFeatures:
            self.dex_features = dex_features

    def save_apk_to_db(self):
        #to-do complete implementation
        row_id = insert_apk(self)
        if row_id:
            pass
        else:
            raise Exception('apk not saved : row_id == None')

    def get_features(self, row_id) -> list:
        features = self.get_dex_features().get_features()
        features.extend(self.get_manifest_features().get_features())
        return [
            {'apk_id': row_id,
             'name': feature['feature_name'],
             'type': feature['feature_type']}
            for feature in features
        ]

    def get_manifest_features(self):
        return self.manifest_features

    def get_dex_features(self):
        return self.dex_features

    def get_name(self):
        return self.name

    def get_malignity(self):
        return self.malignity

    def add_restricted_api(self, api_call):
        self.dex_features.add_restricted_api(api_call)

    def add_suspicious_api(self, api_call):
        self.dex_features.add_suspicious_api(api_call)

    def add_used_permissions(self, permissions):
        self.dex_features.add_used_permissions(permissions)

    def add_url(self, url):
        self.dex_features.add_url(url)

    def add_defined_permissions(self, permissions):
        self.manifest_features.add_permissions(permissions)

    def add_components(self, components):
        self.manifest_features.add_components(components)

    def add_hardwares(self, hardwares):
        self.manifest_features.add_hardwares(hardwares)

    def add_intents(self, intents):
        self.manifest_features.add_intents(intents)

    def get_path(self):
        return self.path


class DexFeatures:
    RESTRICTED_API = 'restricted_api'
    USED_PERM = 'used_perm'
    SUSPICIOUS_API = 'suspicious_api'
    URL = 'url'

    def __init__(self):
        self.restricted_apis = set()
        self.used_permissions = set()
        self.suspicious_apis = set()
        self.urls = set()
        self.features = {DexFeatures.RESTRICTED_API: self.restricted_apis,
                         DexFeatures.USED_PERM: self.used_permissions,
                         DexFeatures.SUSPICIOUS_API: self.suspicious_apis,
                         DexFeatures.URL: self.urls}

    def get_features(self):
        return [{'feature_type': feature_type,
                 'feature_name': feature_name} for feature_type, feature_set in self.features.items()
                for feature_name in feature_set if len(feature_set) != 0]

    def get_restricted_apis(self):
        return self.restricted_apis

    def get_used_permissions(self):
        return self.used_permissions

    def get_suspicious_apis(self):
        return self.suspicious_apis

    def get_url(self):
        return self.urls

    def add_restricted_api(self, api: str):
        self.restricted_apis.add(api)

    def add_used_permissions(self, permissions: list):
        self.used_permissions.update(permissions)

    def add_suspicious_api(self, api: str):
        self.suspicious_apis.add(api)

    def add_url(self, url: str):
        self.urls.add(url)


class ManifestFeatures:
    DEFINED_PERM = 'defined_perm'
    HARDWARE = 'hardware'
    INTENT = 'intent'
    COMPONENT = 'component'

    def __init__(self):
        self.permissions = set()
        self.hardware = set()
        self.intents = set()
        self.components = set()
        self.features = {ManifestFeatures.DEFINED_PERM: self.permissions,
                         ManifestFeatures.HARDWARE: self.hardware,
                         ManifestFeatures.INTENT: self.intents,
                         ManifestFeatures.COMPONENT: self.components}

    def get_features(self):
        return [{'feature_type': feature_type,
                 'feature_name': feature_name} for feature_type, feature_set in self.features.items()
                for feature_name in feature_set if len(feature_set) != 0]

    def get_components(self):
        return self.components

    def get_hardware(self):
        return self.hardware

    def get_intents(self):
        return self.intents

    def get_permissions(self):
        return self.permissions

    def add_permissions(self, permissions):
        self.permissions.update(permissions)

    def add_components(self, components):
        self.components.update(components)

    def add_hardwares(self, hardwares):
        self.hardware.update(hardwares)

    def add_intents(self, intents):
        self.intents.update(intents)
