import requests
from utils import list_files
from zipfile import ZipFile, BadZipFile
import os
import shutil
import hashlib
from credentials import VIRUS_TOTAL_API_KEY
import time

VIRUS_TOTAL_REPORT_URL = "https://www.virustotal.com/vtapi/v2/file/report"
VIRUS_TOTAL_TINY_SCAN_URL = "https://www.virustotal.com/vtapi/v2/file/scan"
VIRUS_TOTAL_BIG_SCAN_URL = ""
VIRUS_TOTAL_not_scanned = 0
VIRUS_TOTAL_scanned = 1
VIRUS_TOTAL_queued_scan = -2
VIRUS_TOTAL_exceeded_rate = 204
VIRUS_TOTAL_limit_size = 32 * 2 ** 20  # 32MB
VT_benign = 1
VT_malware = 0
VT_unknown = -1


def filter_benign_dataset(dir_path):
    filtered_apk_results = os.path.join(os.path.dirname(dir_path),
                                        os.path.basename(dir_path) + '_filtered_apks')
    no_dex_entry = os.path.join(filtered_apk_results, 'no_dex_entry')
    not_benign_apps = os.path.join(filtered_apk_results, 'not_benign')
    bad_zip_file = os.path.join(filtered_apk_results, 'bad_zip_files')
    benign_apps = os.path.join(filtered_apk_results, 'benign')
    unknown_queued_for_scan = os.path.join(filtered_apk_results, 'unknown_queued_for_scan')
    if not os.path.exists(filtered_apk_results):
        os.mkdir(filtered_apk_results)
        os.mkdir(no_dex_entry)
        os.mkdir(not_benign_apps)
        os.mkdir(benign_apps)
        os.mkdir(bad_zip_file)
        os.mkdir(unknown_queued_for_scan)

    apk_files = list_files(dir_path)
    apk_count = 0
    nb_apks = len(apk_files)
    for apk_file in apk_files:
        apk_count += 1
        try:
            app_zip = ZipFile(apk_file)
            entries = app_zip.namelist()
            app_zip.close()
            if 'classes.dex' not in entries:
                shutil.move(apk_file, no_dex_entry)
            else:
                virus_total_malignity = get_malignity_by_virusTotal(apk_file)

                if virus_total_malignity == VT_malware:
                    shutil.move(apk_file, not_benign_apps)

                elif virus_total_malignity == VT_unknown:
                    shutil.move(apk_file, unknown_queued_for_scan)
                    #upload_to_virusTotal(apk_file)

                else:  # benign
                    shutil.move(apk_file, benign_apps)

        except BadZipFile:
            shutil.move(apk_file, bad_zip_file)
        except requests.exceptions.HTTPError:
            print('request HTTPError')

        print(apk_file + ' ..., ' + str(apk_count) + '/ ' + str(nb_apks) + ' done')


def get_malignity_by_virusTotal(apk_path, nb_positives_limit=2) -> int:
    md5_hash = get_MD5_hash(apk_path)
    data = {'apikey': VIRUS_TOTAL_API_KEY, 'resource': md5_hash}
    while True:
        response = requests.post(VIRUS_TOTAL_REPORT_URL, data=data)
        if response.status_code == 200:
            report = response.json()
            if report['response_code'] == VIRUS_TOTAL_scanned:
                if report['positives'] >= nb_positives_limit:
                    return VT_malware
                return VT_benign
            elif report['response_code'] in [VIRUS_TOTAL_not_scanned, VIRUS_TOTAL_queued_scan]:
                return VT_unknown

        elif response.status_code == VIRUS_TOTAL_exceeded_rate:
            time.sleep(60)
        else:
            response.raise_for_status()
            break


def upload_to_virusTotal(apk_path):
    apk_size = os.path.getsize(apk_path)
    params = {'apikey': VIRUS_TOTAL_API_KEY}
    files = {'file': (os.path.basename(apk_path), open(apk_path, 'rb'))}
    if apk_size > VIRUS_TOTAL_limit_size:
        virus_total_scan_url = VIRUS_TOTAL_BIG_SCAN_URL
    else:
        virus_total_scan_url = VIRUS_TOTAL_TINY_SCAN_URL

    while True:
        response = requests.post(virus_total_scan_url, files=files, params=params)
        if response.status_code == VIRUS_TOTAL_exceeded_rate:
            time.sleep(60)
        elif response.status_code == 200:
            break
        else:
            response.raise_for_status()
            break


def get_MD5_hash(file_path):
    buffer_size = 65536  # 64kb
    md5 = hashlib.md5()
    with open(file_path, 'rb') as apk_file:
        while True:
            data = apk_file.read(buffer_size)
            if not data:
                break
            md5.update(data)
    return md5.hexdigest()
