import requests
from utils import list_files
from zipfile import ZipFile
import os
import shutil
import hashlib
from credentials import VIRUS_TOTAL_API_KEY
import time

VIRUS_TOTAL_REPORT_URL = "https://www.virustotal.com/vtapi/v2/file/report"


def filter_benign_dataset(dir_path):
    no_dex_entry = os.path.join(dir_path, 'no_dex_entry')
    os.mkdir(no_dex_entry)
    not_benign_apps = os.path.join(dir_path, 'not_benign')
    os.mkdir(not_benign_apps)

    apk_files = list_files(dir_path)
    for apk_file in apk_files:
        app_zip = ZipFile(apk_file)
        entries = app_zip.namelist()
        app_zip.close()
        if 'classes.dex' not in entries:
            shutil.move(apk_file, no_dex_entry)
        else:
            if is_malicious_by_virusTotal(apk_file):
                shutil.move(apk_file, not_benign_apps)
                time.sleep(16)  # to keep the api rate constraint


def is_malicious_by_virusTotal(apk_path, nb_positives_limit=2) -> bool:
    md5_hash = get_MD5_hash(apk_path)
    data = {'apikey': VIRUS_TOTAL_API_KEY, 'resource': md5_hash}
    response = requests.post(VIRUS_TOTAL_REPORT_URL, data=data)
    if response.status_code == 200:
        report = response.json()
        if report['response_code'] == 1 and report['positives'] >= nb_positives_limit:
            return True
    return False


def get_MD5_hash(file_path):
    buffer_size = 65536  # 64kb
    md5 = hashlib.md5()
    with open(file_path, 'rb') as apk_file:
        while True:
            data = apk_file.read(buffer_size)
            if not data:
                break
            md5.update(data)
    return md5.hexdigest()