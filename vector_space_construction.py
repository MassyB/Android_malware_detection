from db_context_managers import OpenReaderCursor
from vector_space_construction_SQL import _SQL_get_dimensions
from db_manager import get_apk_features, get_apks

import numpy as np
from scipy import sparse as sp
from sklearn.svm import LinearSVC


def get_vector_space_dimensions() -> list:
    with OpenReaderCursor(_SQL_get_dimensions) as cursor:
        return [dimension[0] for dimension in cursor.fetchall()]


def get_vector_space_dict() -> dict:
    dimensions = get_vector_space_dimensions()
    indices = range(len(dimensions))
    return {dimension: indice for dimension, indice in zip(dimensions, indices)}


def get_app_sparse_feature_vector(vector_space_dict: dict, apk_id: int) -> list:
    """getting the apk_features from the DB and then returning the indices of the features in the VS"""
    apk_features = get_apk_features(apk_id)
    return [vector_space_dict[feature]
            for feature in apk_features
            if feature in vector_space_dict]


def get_X_y(vector_space_dict: dict, apks: list):
    """ apks = [(apk_id, malignity) ...], apk_id : int and malignity == 0 or 1"""
    nb_apks = len(apks)
    nb_dimensions = len(vector_space_dict)
    X = sp.lil_matrix((nb_apks, nb_dimensions), dtype=np.int8)
    y = np.zeros(nb_apks, dtype=np.int8)
    rows = [i for i in range(nb_apks)]
    apk_ids = [apk_id for apk_id, _ in apks]
    apk_malignities = [apk_malignity for _, apk_malignity in apks]
    for row, apk_id, apk_malignity in zip(rows, apk_ids, apk_malignities):
        features_indices = get_app_sparse_feature_vector(vector_space_dict, apk_id)
        X[row, np.sort(features_indices)] = 1
        if apk_malignity == 1:
            y[row] = 1

    return X, y


def get_all_X_y():
    """get the vectorized version of all APKs in the DB"""
    vector_space_dict = get_vector_space_dict()
    apks = get_apks()
    return get_X_y(vector_space_dict, apks)


def get_model(X, y) -> tuple:
    """W represent the vector model: linear_svc.coef_ == w1,w2 ...wn and linear.svm.intercept_ == w0
       for 2-dim space the model is W(w0,w1,w2)
       the detection function is f(X) = w0 + w1 * x1 + w2 * x2
       linear_svc.coef_ == w1,w2 and linear_svc.intercept_ == w0"""
    linear_svc = LinearSVC()
    linear_svc.fit(X, y)
    return linear_svc.coef_, linear_svc.intercept_
