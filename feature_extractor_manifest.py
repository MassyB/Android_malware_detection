import re,os
from apk import APK
from utils import *
import xml.etree.ElementTree as etree

#Const
android_name_attrib = '{http://schemas.android.com/apk/res/android}name'

PERMISSION = 'permission'
FEATURE = 'feature'
INTENT = 'intent'
ACTIVITY = 'activity'
SERVICE = 'service'
RECEIVER = 'receiver'
PROVIDER = 'provider'

PATTERN = 'E: uses-permission(.*?)A: android:name(.*?)="(?P<'+PERMISSION+'>.*?)"|' \
          'E: uses-feature(.*?)A: android:name(.*?)="(?P<'+FEATURE+'>.*?)"|' \
          'E: intent-filter(.*?)E: action(.*?)A: android:name(.*?)="(?P<'+INTENT+'>.*?)"|' \
          'E: activity(.*?)A: android:name(.*?)="(?P<'+ACTIVITY+'>.*?)"|' \
          'E: service(.*?)A: android:name(.*?)="(?P<'+SERVICE+'>.*?)"|' \
          'E: provider(.*?)A: android:name(.*?)="(?P<'+PROVIDER+'>.*?)"|' \
          'E: receiver(.*?)A: android:name(.*?)="(?P<'+RECEIVER+'>.*?)"'


list_permissions = set()
list_hardwares = set()
intent_filters = set()
list_activities = set()
list_receivers = set()
list_services = set()
list_providers = set()

def extract_manifest_features(apk: 'APK', use_aapt=False):
    if use_aapt:
        #call aapt
        execute_aapt(apk.get_path())
        #opening manifest and searcing for regex
        with open(AAPT_OUTPUT_MANIFEST, 'r') as manifest_file:
            manifest_content = manifest_file.read()#.replace('\n', ' ')
            for match in re.finditer(PATTERN, manifest_content, re.DOTALL):
                #print(match.groupdict())
                get_feature(match)

    else:
        execute_apktool(apk.get_path())
        manifest_path = os.path.join(APKTOOL_OUTPUT, "AndroidManifest.xml")
        tree = etree.parse(manifest_path)
        root = tree.getroot()

        root.get('package')
        global list_receivers,list_providers,list_services,list_activities,list_permissions,list_hardwares,intent_filters
        list_permissions = extract_permissions(root)
        list_hardwares = extract_hardwares(root)
        intent_filters = set()
        list_activities = extract_activities(root, intent_filters)
        list_receivers = extract_receivers(root, intent_filters)
        list_services = extract_services(root, intent_filters)
        list_providers = extract_providers(root)

    apk.add_activities(list_activities)
    apk.add_receivers(list_receivers)
    apk.add_services(list_services)
    apk.add_providers(list_providers)
    apk.add_intents(intent_filters)
    apk.add_hardwares(list_hardwares)
    apk.add_defined_permissions(list_permissions)

#used after calling aapt to distinguish the type of pattern found in regex
def get_feature(match):
    if match.group(PERMISSION):
        list_permissions.add(match.group(PERMISSION))
    elif match.group(FEATURE):
        list_hardwares.add(match.group(FEATURE))
    elif match.group(INTENT):
        intent_filters.add(match.group(INTENT))
    elif match.group(ACTIVITY):
        list_activities.add(match.group(ACTIVITY))
    elif match.group(SERVICE):
        list_services.add(match.group(SERVICE))
    elif match.group(PROVIDER):
        list_providers.add(match.group(PROVIDER))
    elif match.group(RECEIVER):
        list_receivers.add(match.group(RECEIVER))

#these function are called to extract features uby parsing the xml tree

def extract_permissions(root):
    list_permissions = set()
    permissions = root.findall("uses-permission")
    for permission in permissions:
        name = permission.get(android_name_attrib)
        list_permissions.add(name)
    return list_permissions


def extract_activities(root, intent_filters=set()):
    list_activities = set()
    application = root.find("application")
    activities = application.findall("activity")
    for activity in activities:
        name = activity.get(android_name_attrib)
        list_activities.add(name)
        get_intents(activity, intent_filters)
    return list_activities


def extract_services(root, intent_filters=set()):
    list_services = set()
    application = root.find("application")
    services = application.findall("service")
    for service in services:
        name = service.get(android_name_attrib)
        list_services.add(name)
        get_intents(service, intent_filters)
    return list_services


def extract_receivers(root, intent_filters=set()):
    list_receivers = set()
    application = root.find("application")
    receivers = application.findall("receiver")
    for receiver in receivers:
        name = receiver.get(android_name_attrib)
        list_receivers.add(name)
        get_intents(receiver, intent_filters)

    return list_receivers


def extract_providers(root):
    list_providers = set()
    application = root.find("application")
    providers = application.findall("provider")
    for provider in providers:
        name = provider.get(android_name_attrib)
        list_providers.add(name)
        # there is no intent filters in providers :p
    return list_providers


def get_intents(component, intent_filters):
    list_filters = component.findall("intent-filter")
    for intent_filter in list_filters:
        actions = intent_filter.findall("action")
        for action in actions:
            name = action.get(android_name_attrib)
            intent_filters.add(name)


def extract_hardwares(root):
    list_hardwares = set()
    features = root.findall("uses-feature")
    for feature in features:
        name = feature.get(android_name_attrib)
        list_hardwares.add(name)
    return list_hardwares

def run_test(use_aapt=False):
    #apk_path = os.path.join(MALWARE_DATASET_DIR_PATH,'0a0a78000e418ea28fa02e8c162c43396db6141ef8fe876db4027fef04bed663')
    apk_path = os.path.join(BENIGN_DATASET_DIR_PATH,'camera.apk')

    print(apk_path)
    apk = APK(apk_path,1)
    extract_manifest_features(apk,use_aapt=use_aapt)
    #Testing
    for f in apk.get_manifest_features().get_features():
        print(f.get('feature_type')+'::'+f.get('feature_name') )
#run_test(use_aapt=True)
#run_test()