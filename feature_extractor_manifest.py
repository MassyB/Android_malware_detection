import re, os
from apk import APK
from utils import *
import xml.etree.ElementTree as etree

#Const
#android_name_attrib = '{http://schemas.android.com/apk/res/android}name'

PERMISSION = 'permission'
FEATURE = 'feature'
INTENT = 'intent'
ACTIVITY = 'activity'
SERVICE = 'service'
RECEIVER = 'receiver'
PROVIDER = 'provider'

PATTERN = 'E: uses-permission(.*?)A: android:name(.*?)="(?P<'+PERMISSION+'>.*?)"|' \
          'E: uses-feature(.*?)A: android:name(.*?)="(?P<'+FEATURE+'>.*?)"|' \
          'E: intent-filter(.*?)E: action(.*?)A: android:name(.*?)="(?P<'+INTENT+'>.*?)"|' \
          'E: activity(.*?)A: android:name(.*?)="(?P<'+ACTIVITY+'>.*?)"|' \
          'E: service(.*?)A: android:name(.*?)="(?P<'+SERVICE+'>.*?)"|' \
          'E: provider(.*?)A: android:name(.*?)="(?P<'+PROVIDER+'>.*?)"|' \
          'E: receiver(.*?)A: android:name(.*?)="(?P<'+RECEIVER+'>.*?)"'

PATTERN_XML =   '<uses-permission android:name="(?P<'+PERMISSION+'>.*?)"|'\
                '<uses-feature android:name="(?P<'+FEATURE+'>.*?)"|'\
                '<intent-filter(.*?)action android:name="(?P<'+INTENT+'>.*?)"|'\
                '<activity(.*?)android:name="(?P<'+ACTIVITY+'>.*?)"|'\
                '<service(.*?)android:name="(?P<'+SERVICE+'>.*?)"|'\
                '<provider(.*?)android:name="(?P<'+PROVIDER+'>.*?)"|'\
                '<receiver(.*?)android:name="(?P<'+RECEIVER+'>.*?)"|'

list_permissions = set()
list_hardwares = set()
intent_filters = set()
list_activities = set()
list_receivers = set()
list_services = set()
list_providers = set()

def extract_features_using_tool(apk:'APK', execute_tool, manifest_path:str, pattern: str):
    execute_tool(apk.get_path())
    # opening manifest and searcing for regex
    with open(manifest_path, 'r') as manifest_file:
        manifest_content = manifest_file.read()
        for match in re.finditer(pattern, manifest_content, re.DOTALL):
            # print(match.groupdict())
            get_feature(match)

def extract_manifest_features(apk: 'APK', use_aapt=False):
    if use_aapt:
        #call aapt
        extract_features_using_tool(apk,execute_aapt,AAPT_OUTPUT_MANIFEST,PATTERN)
    else:
        #call apktool
        extract_features_using_tool(apk, execute_apktool, APKTOOL_OUTPUT_MANIFEST, PATTERN_XML)

#used after calling aapt to distinguish the type of pattern found in regex
def get_feature(match):
    if match.group(PERMISSION):
        list_permissions.add(match.group(PERMISSION))
    elif match.group(FEATURE):
        list_hardwares.add(match.group(FEATURE))
    elif match.group(INTENT):
        intent_filters.add(match.group(INTENT))
    elif match.group(ACTIVITY):
        list_activities.add(match.group(ACTIVITY))
    elif match.group(SERVICE):
        list_services.add(match.group(SERVICE))
    elif match.group(PROVIDER):
        list_providers.add(match.group(PROVIDER))
    elif match.group(RECEIVER):
        list_receivers.add(match.group(RECEIVER))

"""
def run_test(use_aapt=False):
    #apk_path = os.path.join(MALWARE_DATASET_DIR_PATH,'0a0a78000e418ea28fa02e8c162c43396db6141ef8fe876db4027fef04bed663')
    apk_path = os.path.join(BENIGN_DATASET_DIR_PATH,'camera.apk')

    print(apk_path)
    apk = APK(apk_path,1)
    extract_manifest_features(apk,use_aapt=use_aapt)
    #Testing
    for f in apk.get_manifest_features().get_features():
        print(f.get('feature_type')+'::'+f.get('feature_name') )
run_test(use_aapt=True)
run_test()
"""
