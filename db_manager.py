# module qui va contenir le code "métier" relatif à la bdd

from db_context_managers import OpenReaderCursor, OpenWriterCursor, OpenMultiWriterCursor

_SQL_get_api_permissions = """ SELECT permission
                                   FROM api_permission_mapping
                                   WHERE api = :api """

_SQL_is_suspicious_methode_description = """ SELECT count(api)
                                             FROM suspicious_apis
                                             WHERE api = :api"""

_SQL_insert_apk = """ INSERT INTO apks(name, malignity)
                      VALUES (:name, :malignity)"""

_SQL_insert_features = """ INSERT INTO features(apk_id, name, type)
                           VALUES (:apk_id, :name, :type)"""

_SQL_get_apk_features = """SELECT printf("%s::%s", features.type, features.name) AS feature
                           FROM apks
                           JOIN
	                       features ON apks.id = features.apk_id
                           WHERE apks.name =:apk_name"""


def get_apk_features(apk_name: str) -> list:
    with OpenReaderCursor(_SQL_get_apk_features, {'apk_name': apk_name}) as cursor:
        return [feature[0] for feature in cursor.fetchall()]


def get_api_permissions(api: str) -> list:
    with OpenReaderCursor(_SQL_get_api_permissions, {'api': api}) as cursor:
        return [permission[0] for permission in cursor.fetchall()]


def is_suspicious(method_description: str) -> bool:
    with OpenReaderCursor(_SQL_is_suspicious_methode_description, {'api': method_description}) as cursor:
        return cursor.fetchone()[0] != 0


def insert_apk(apk: 'APK') -> int:
    with OpenWriterCursor(_SQL_insert_apk, {'name': apk.get_name(), 'malignity': apk.get_malignity()}) as cursor:
        return cursor.lastrowid


def insert_features(features: list):
    """ list est une liste de dicotionnaires de la forme {'apk_id': ..., 'name': ..., 'malignity': ...}"""
    with OpenMultiWriterCursor(_SQL_insert_features, features):
        pass
